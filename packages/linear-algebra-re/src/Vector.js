// Generated by BUCKLESCRIPT VERSION 4.0.14, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Math$LinearAlgebraRe = require("./Math.js");
var Root$LinearAlgebraRe = require("./Root.js");

function add($staropt$star, v1, v2) {
  var i = $staropt$star !== undefined ? $staropt$star : 0;
  if (v1) {
    return /* :: */[
            v1[0] + List.nth(v2, i),
            add(i + 1 | 0, v1[1], v2)
          ];
  } else {
    return /* [] */0;
  }
}

function substract($staropt$star, v1, v2) {
  var i = $staropt$star !== undefined ? $staropt$star : 0;
  if (v1) {
    return /* :: */[
            v1[0] - List.nth(v2, i),
            substract(i + 1 | 0, v1[1], v2)
          ];
  } else {
    return /* [] */0;
  }
}

function scalar(n, v) {
  if (v) {
    return /* :: */[
            v[0] * n,
            scalar(n, v[1])
          ];
  } else {
    return /* [] */0;
  }
}

function magnitude(v) {
  var aux = function (v) {
    if (v) {
      var entry = v[0];
      return entry * entry + aux(v[1]);
    } else {
      return 0.00;
    }
  };
  return Root$LinearAlgebraRe.float_sqroot(aux(v));
}

function direction(v) {
  if (v) {
    return /* :: */[
            1.00 / magnitude(v) * v[0],
            direction(v[1])
          ];
  } else {
    return /* [] */0;
  }
}

function dot_product($staropt$star, v1, v2) {
  var i = $staropt$star !== undefined ? $staropt$star : 0;
  if (v1) {
    return v1[0] * List.nth(v2, i) + dot_product(i + 1 | 0, v1[1], v2);
  } else {
    return 0.00;
  }
}

function angle(angleUnit, v1, v2) {
  if (angleUnit) {
    return Math$LinearAlgebraRe.rad_to_deg(Math.acos(dot_product(undefined, v1, v2) / (magnitude(v1) * magnitude(v2))));
  } else {
    return Math.acos(dot_product(undefined, v1, v2) / (magnitude(v1) * magnitude(v2)));
  }
}

function is_orthogonal(v1, v2) {
  return Math$LinearAlgebraRe.float_abs(dot_product(undefined, v1, v2)) < 1e-10;
}

function is_zero(v1) {
  return magnitude(v1) < 1e-10;
}

function is_parallel(v1, v2) {
  if (magnitude(v1) < 1e-10 || magnitude(v2) < 1e-10 || angle(/* Degrees */1, v1, v2) === 0.00) {
    return true;
  } else {
    return angle(/* Degrees */1, v1, v2) === Math$LinearAlgebraRe.rad_to_deg(Math.PI);
  }
}

exports.add = add;
exports.substract = substract;
exports.scalar = scalar;
exports.magnitude = magnitude;
exports.direction = direction;
exports.dot_product = dot_product;
exports.angle = angle;
exports.is_orthogonal = is_orthogonal;
exports.is_zero = is_zero;
exports.is_parallel = is_parallel;
/* No side effect */
